*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZMV_EMPLOYEE....................................*
FORM GET_DATA_ZMV_EMPLOYEE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZEMPLOYEE_MASTER WHERE
(VIM_WHERETAB) .
    CLEAR ZMV_EMPLOYEE .
ZMV_EMPLOYEE-MANDT =
ZEMPLOYEE_MASTER-MANDT .
ZMV_EMPLOYEE-EMPLOYEE_ID =
ZEMPLOYEE_MASTER-EMPLOYEE_ID .
ZMV_EMPLOYEE-TITLE =
ZEMPLOYEE_MASTER-TITLE .
ZMV_EMPLOYEE-FIRST_NAME =
ZEMPLOYEE_MASTER-FIRST_NAME .
ZMV_EMPLOYEE-LAST_NAME =
ZEMPLOYEE_MASTER-LAST_NAME .
ZMV_EMPLOYEE-DOJ =
ZEMPLOYEE_MASTER-DOJ .
ZMV_EMPLOYEE-DEPARTAMENT =
ZEMPLOYEE_MASTER-DEPARTAMENT .
ZMV_EMPLOYEE-CTC =
ZEMPLOYEE_MASTER-CTC .
ZMV_EMPLOYEE-CURRENCY =
ZEMPLOYEE_MASTER-CURRENCY .
ZMV_EMPLOYEE-CREATEDBY =
ZEMPLOYEE_MASTER-CREATEDBY .
ZMV_EMPLOYEE-CREATEDON =
ZEMPLOYEE_MASTER-CREATEDON .
ZMV_EMPLOYEE-CREATEDTIME =
ZEMPLOYEE_MASTER-CREATEDTIME .
    SELECT SINGLE * FROM ZEMPLOYEE_COM WHERE
EMPLOYEE_ID = ZEMPLOYEE_MASTER-EMPLOYEE_ID .
    IF SY-SUBRC EQ 0.
ZMV_EMPLOYEE-MOBILE1 =
ZEMPLOYEE_COM-MOBILE1 .
ZMV_EMPLOYEE-MOBILE2 =
ZEMPLOYEE_COM-MOBILE2 .
ZMV_EMPLOYEE-ADDRESS =
ZEMPLOYEE_COM-ADDRESS .
    ENDIF.
<VIM_TOTAL_STRUC> = ZMV_EMPLOYEE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZMV_EMPLOYEE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZMV_EMPLOYEE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZMV_EMPLOYEE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZEMPLOYEE_MASTER WHERE
  EMPLOYEE_ID = ZMV_EMPLOYEE-EMPLOYEE_ID .
    IF SY-SUBRC = 0.
    DELETE ZEMPLOYEE_MASTER .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZEMPLOYEE_COM WHERE
    EMPLOYEE_ID = ZEMPLOYEE_MASTER-EMPLOYEE_ID .
    IF SY-SUBRC = 0.
    DELETE ZEMPLOYEE_COM .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZEMPLOYEE_MASTER WHERE
  EMPLOYEE_ID = ZMV_EMPLOYEE-EMPLOYEE_ID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZEMPLOYEE_MASTER.
    ENDIF.
ZEMPLOYEE_MASTER-MANDT =
ZMV_EMPLOYEE-MANDT .
ZEMPLOYEE_MASTER-EMPLOYEE_ID =
ZMV_EMPLOYEE-EMPLOYEE_ID .
ZEMPLOYEE_MASTER-TITLE =
ZMV_EMPLOYEE-TITLE .
ZEMPLOYEE_MASTER-FIRST_NAME =
ZMV_EMPLOYEE-FIRST_NAME .
ZEMPLOYEE_MASTER-LAST_NAME =
ZMV_EMPLOYEE-LAST_NAME .
ZEMPLOYEE_MASTER-DOJ =
ZMV_EMPLOYEE-DOJ .
ZEMPLOYEE_MASTER-DEPARTAMENT =
ZMV_EMPLOYEE-DEPARTAMENT .
ZEMPLOYEE_MASTER-CTC =
ZMV_EMPLOYEE-CTC .
ZEMPLOYEE_MASTER-CURRENCY =
ZMV_EMPLOYEE-CURRENCY .
ZEMPLOYEE_MASTER-CREATEDBY =
ZMV_EMPLOYEE-CREATEDBY .
ZEMPLOYEE_MASTER-CREATEDON =
ZMV_EMPLOYEE-CREATEDON .
ZEMPLOYEE_MASTER-CREATEDTIME =
ZMV_EMPLOYEE-CREATEDTIME .
    IF SY-SUBRC = 0.
    UPDATE ZEMPLOYEE_MASTER ##WARN_OK.
    ELSE.
    INSERT ZEMPLOYEE_MASTER .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZEMPLOYEE_COM WHERE
    EMPLOYEE_ID = ZEMPLOYEE_MASTER-EMPLOYEE_ID .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZEMPLOYEE_COM.
ZEMPLOYEE_COM-EMPLOYEE_ID =
ZEMPLOYEE_MASTER-EMPLOYEE_ID .
      ENDIF.
ZEMPLOYEE_COM-MOBILE1 =
ZMV_EMPLOYEE-MOBILE1 .
ZEMPLOYEE_COM-MOBILE2 =
ZMV_EMPLOYEE-MOBILE2 .
ZEMPLOYEE_COM-ADDRESS =
ZMV_EMPLOYEE-ADDRESS .
    IF SY-SUBRC = 0.
    UPDATE ZEMPLOYEE_COM ##WARN_OK.
    ELSE.
    INSERT ZEMPLOYEE_COM .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZMV_EMPLOYEE-UPD_FLAG,
STATUS_ZMV_EMPLOYEE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZMV_EMPLOYEE.
  SELECT SINGLE * FROM ZEMPLOYEE_MASTER WHERE
EMPLOYEE_ID = ZMV_EMPLOYEE-EMPLOYEE_ID .
ZMV_EMPLOYEE-MANDT =
ZEMPLOYEE_MASTER-MANDT .
ZMV_EMPLOYEE-EMPLOYEE_ID =
ZEMPLOYEE_MASTER-EMPLOYEE_ID .
ZMV_EMPLOYEE-TITLE =
ZEMPLOYEE_MASTER-TITLE .
ZMV_EMPLOYEE-FIRST_NAME =
ZEMPLOYEE_MASTER-FIRST_NAME .
ZMV_EMPLOYEE-LAST_NAME =
ZEMPLOYEE_MASTER-LAST_NAME .
ZMV_EMPLOYEE-DOJ =
ZEMPLOYEE_MASTER-DOJ .
ZMV_EMPLOYEE-DEPARTAMENT =
ZEMPLOYEE_MASTER-DEPARTAMENT .
ZMV_EMPLOYEE-CTC =
ZEMPLOYEE_MASTER-CTC .
ZMV_EMPLOYEE-CURRENCY =
ZEMPLOYEE_MASTER-CURRENCY .
ZMV_EMPLOYEE-CREATEDBY =
ZEMPLOYEE_MASTER-CREATEDBY .
ZMV_EMPLOYEE-CREATEDON =
ZEMPLOYEE_MASTER-CREATEDON .
ZMV_EMPLOYEE-CREATEDTIME =
ZEMPLOYEE_MASTER-CREATEDTIME .
    SELECT SINGLE * FROM ZEMPLOYEE_COM WHERE
EMPLOYEE_ID = ZEMPLOYEE_MASTER-EMPLOYEE_ID .
    IF SY-SUBRC EQ 0.
ZMV_EMPLOYEE-MOBILE1 =
ZEMPLOYEE_COM-MOBILE1 .
ZMV_EMPLOYEE-MOBILE2 =
ZEMPLOYEE_COM-MOBILE2 .
ZMV_EMPLOYEE-ADDRESS =
ZEMPLOYEE_COM-ADDRESS .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZMV_EMPLOYEE-MOBILE1 .
      CLEAR ZMV_EMPLOYEE-MOBILE2 .
      CLEAR ZMV_EMPLOYEE-ADDRESS .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZMV_EMPLOYEE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZMV_EMPLOYEE-EMPLOYEE_ID TO
ZEMPLOYEE_MASTER-EMPLOYEE_ID .
MOVE ZMV_EMPLOYEE-MANDT TO
ZEMPLOYEE_MASTER-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEMPLOYEE_MASTER'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEMPLOYEE_MASTER TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEMPLOYEE_MASTER'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZEMPLOYEE_MASTER-EMPLOYEE_ID TO
ZEMPLOYEE_COM-EMPLOYEE_ID .
MOVE ZMV_EMPLOYEE-MANDT TO
ZEMPLOYEE_COM-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZEMPLOYEE_COM'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZEMPLOYEE_COM TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZEMPLOYEE_COM'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
